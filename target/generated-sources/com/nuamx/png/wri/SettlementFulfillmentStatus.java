/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nuamx.png.wri;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SettlementFulfillmentStatus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8995329126408957002L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SettlementFulfillmentStatus\",\"namespace\":\"com.nuamx.png.wri\",\"fields\":[{\"name\":\"instructionId\",\"type\":\"long\"},{\"name\":\"tradeDate\",\"type\":\"string\"},{\"name\":\"settlementDate\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"string\"},{\"name\":\"settledQuantity\",\"type\":\"string\"},{\"name\":\"cashAmount\",\"type\":\"string\"},{\"name\":\"cashSettledAmount\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"ccpCode\",\"type\":\"string\"},{\"name\":\"lastUpdatedTimestamp\",\"type\":{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}}],\"connect.name\":\"com.nuamx.png.wri.SettlementFulfillmentStatus\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SettlementFulfillmentStatus> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SettlementFulfillmentStatus> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SettlementFulfillmentStatus> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SettlementFulfillmentStatus> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SettlementFulfillmentStatus> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SettlementFulfillmentStatus to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SettlementFulfillmentStatus from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SettlementFulfillmentStatus instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SettlementFulfillmentStatus fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long instructionId;
  private java.lang.CharSequence tradeDate;
  private java.lang.CharSequence settlementDate;
  private java.lang.CharSequence quantity;
  private java.lang.CharSequence settledQuantity;
  private java.lang.CharSequence cashAmount;
  private java.lang.CharSequence cashSettledAmount;
  private java.lang.CharSequence status;
  private java.lang.CharSequence ccpCode;
  private java.time.Instant lastUpdatedTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SettlementFulfillmentStatus() {}

  /**
   * All-args constructor.
   * @param instructionId The new value for instructionId
   * @param tradeDate The new value for tradeDate
   * @param settlementDate The new value for settlementDate
   * @param quantity The new value for quantity
   * @param settledQuantity The new value for settledQuantity
   * @param cashAmount The new value for cashAmount
   * @param cashSettledAmount The new value for cashSettledAmount
   * @param status The new value for status
   * @param ccpCode The new value for ccpCode
   * @param lastUpdatedTimestamp The new value for lastUpdatedTimestamp
   */
  public SettlementFulfillmentStatus(java.lang.Long instructionId, java.lang.CharSequence tradeDate, java.lang.CharSequence settlementDate, java.lang.CharSequence quantity, java.lang.CharSequence settledQuantity, java.lang.CharSequence cashAmount, java.lang.CharSequence cashSettledAmount, java.lang.CharSequence status, java.lang.CharSequence ccpCode, java.time.Instant lastUpdatedTimestamp) {
    this.instructionId = instructionId;
    this.tradeDate = tradeDate;
    this.settlementDate = settlementDate;
    this.quantity = quantity;
    this.settledQuantity = settledQuantity;
    this.cashAmount = cashAmount;
    this.cashSettledAmount = cashSettledAmount;
    this.status = status;
    this.ccpCode = ccpCode;
    this.lastUpdatedTimestamp = lastUpdatedTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instructionId;
    case 1: return tradeDate;
    case 2: return settlementDate;
    case 3: return quantity;
    case 4: return settledQuantity;
    case 5: return cashAmount;
    case 6: return cashSettledAmount;
    case 7: return status;
    case 8: return ccpCode;
    case 9: return lastUpdatedTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instructionId = (java.lang.Long)value$; break;
    case 1: tradeDate = (java.lang.CharSequence)value$; break;
    case 2: settlementDate = (java.lang.CharSequence)value$; break;
    case 3: quantity = (java.lang.CharSequence)value$; break;
    case 4: settledQuantity = (java.lang.CharSequence)value$; break;
    case 5: cashAmount = (java.lang.CharSequence)value$; break;
    case 6: cashSettledAmount = (java.lang.CharSequence)value$; break;
    case 7: status = (java.lang.CharSequence)value$; break;
    case 8: ccpCode = (java.lang.CharSequence)value$; break;
    case 9: lastUpdatedTimestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instructionId' field.
   * @return The value of the 'instructionId' field.
   */
  public long getInstructionId() {
    return instructionId;
  }


  /**
   * Sets the value of the 'instructionId' field.
   * @param value the value to set.
   */
  public void setInstructionId(long value) {
    this.instructionId = value;
  }

  /**
   * Gets the value of the 'tradeDate' field.
   * @return The value of the 'tradeDate' field.
   */
  public java.lang.CharSequence getTradeDate() {
    return tradeDate;
  }


  /**
   * Sets the value of the 'tradeDate' field.
   * @param value the value to set.
   */
  public void setTradeDate(java.lang.CharSequence value) {
    this.tradeDate = value;
  }

  /**
   * Gets the value of the 'settlementDate' field.
   * @return The value of the 'settlementDate' field.
   */
  public java.lang.CharSequence getSettlementDate() {
    return settlementDate;
  }


  /**
   * Sets the value of the 'settlementDate' field.
   * @param value the value to set.
   */
  public void setSettlementDate(java.lang.CharSequence value) {
    this.settlementDate = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.CharSequence getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.CharSequence value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'settledQuantity' field.
   * @return The value of the 'settledQuantity' field.
   */
  public java.lang.CharSequence getSettledQuantity() {
    return settledQuantity;
  }


  /**
   * Sets the value of the 'settledQuantity' field.
   * @param value the value to set.
   */
  public void setSettledQuantity(java.lang.CharSequence value) {
    this.settledQuantity = value;
  }

  /**
   * Gets the value of the 'cashAmount' field.
   * @return The value of the 'cashAmount' field.
   */
  public java.lang.CharSequence getCashAmount() {
    return cashAmount;
  }


  /**
   * Sets the value of the 'cashAmount' field.
   * @param value the value to set.
   */
  public void setCashAmount(java.lang.CharSequence value) {
    this.cashAmount = value;
  }

  /**
   * Gets the value of the 'cashSettledAmount' field.
   * @return The value of the 'cashSettledAmount' field.
   */
  public java.lang.CharSequence getCashSettledAmount() {
    return cashSettledAmount;
  }


  /**
   * Sets the value of the 'cashSettledAmount' field.
   * @param value the value to set.
   */
  public void setCashSettledAmount(java.lang.CharSequence value) {
    this.cashSettledAmount = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'ccpCode' field.
   * @return The value of the 'ccpCode' field.
   */
  public java.lang.CharSequence getCcpCode() {
    return ccpCode;
  }


  /**
   * Sets the value of the 'ccpCode' field.
   * @param value the value to set.
   */
  public void setCcpCode(java.lang.CharSequence value) {
    this.ccpCode = value;
  }

  /**
   * Gets the value of the 'lastUpdatedTimestamp' field.
   * @return The value of the 'lastUpdatedTimestamp' field.
   */
  public java.time.Instant getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }


  /**
   * Sets the value of the 'lastUpdatedTimestamp' field.
   * @param value the value to set.
   */
  public void setLastUpdatedTimestamp(java.time.Instant value) {
    this.lastUpdatedTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new SettlementFulfillmentStatus RecordBuilder.
   * @return A new SettlementFulfillmentStatus RecordBuilder
   */
  public static com.nuamx.png.wri.SettlementFulfillmentStatus.Builder newBuilder() {
    return new com.nuamx.png.wri.SettlementFulfillmentStatus.Builder();
  }

  /**
   * Creates a new SettlementFulfillmentStatus RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SettlementFulfillmentStatus RecordBuilder
   */
  public static com.nuamx.png.wri.SettlementFulfillmentStatus.Builder newBuilder(com.nuamx.png.wri.SettlementFulfillmentStatus.Builder other) {
    if (other == null) {
      return new com.nuamx.png.wri.SettlementFulfillmentStatus.Builder();
    } else {
      return new com.nuamx.png.wri.SettlementFulfillmentStatus.Builder(other);
    }
  }

  /**
   * Creates a new SettlementFulfillmentStatus RecordBuilder by copying an existing SettlementFulfillmentStatus instance.
   * @param other The existing instance to copy.
   * @return A new SettlementFulfillmentStatus RecordBuilder
   */
  public static com.nuamx.png.wri.SettlementFulfillmentStatus.Builder newBuilder(com.nuamx.png.wri.SettlementFulfillmentStatus other) {
    if (other == null) {
      return new com.nuamx.png.wri.SettlementFulfillmentStatus.Builder();
    } else {
      return new com.nuamx.png.wri.SettlementFulfillmentStatus.Builder(other);
    }
  }

  /**
   * RecordBuilder for SettlementFulfillmentStatus instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SettlementFulfillmentStatus>
    implements org.apache.avro.data.RecordBuilder<SettlementFulfillmentStatus> {

    private long instructionId;
    private java.lang.CharSequence tradeDate;
    private java.lang.CharSequence settlementDate;
    private java.lang.CharSequence quantity;
    private java.lang.CharSequence settledQuantity;
    private java.lang.CharSequence cashAmount;
    private java.lang.CharSequence cashSettledAmount;
    private java.lang.CharSequence status;
    private java.lang.CharSequence ccpCode;
    private java.time.Instant lastUpdatedTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nuamx.png.wri.SettlementFulfillmentStatus.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instructionId)) {
        this.instructionId = data().deepCopy(fields()[0].schema(), other.instructionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.tradeDate)) {
        this.tradeDate = data().deepCopy(fields()[1].schema(), other.tradeDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[2].schema(), other.settlementDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.settledQuantity)) {
        this.settledQuantity = data().deepCopy(fields()[4].schema(), other.settledQuantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.cashAmount)) {
        this.cashAmount = data().deepCopy(fields()[5].schema(), other.cashAmount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.cashSettledAmount)) {
        this.cashSettledAmount = data().deepCopy(fields()[6].schema(), other.cashSettledAmount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ccpCode)) {
        this.ccpCode = data().deepCopy(fields()[8].schema(), other.ccpCode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.lastUpdatedTimestamp)) {
        this.lastUpdatedTimestamp = data().deepCopy(fields()[9].schema(), other.lastUpdatedTimestamp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing SettlementFulfillmentStatus instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nuamx.png.wri.SettlementFulfillmentStatus other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.instructionId)) {
        this.instructionId = data().deepCopy(fields()[0].schema(), other.instructionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tradeDate)) {
        this.tradeDate = data().deepCopy(fields()[1].schema(), other.tradeDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[2].schema(), other.settlementDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.settledQuantity)) {
        this.settledQuantity = data().deepCopy(fields()[4].schema(), other.settledQuantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cashAmount)) {
        this.cashAmount = data().deepCopy(fields()[5].schema(), other.cashAmount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cashSettledAmount)) {
        this.cashSettledAmount = data().deepCopy(fields()[6].schema(), other.cashSettledAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ccpCode)) {
        this.ccpCode = data().deepCopy(fields()[8].schema(), other.ccpCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lastUpdatedTimestamp)) {
        this.lastUpdatedTimestamp = data().deepCopy(fields()[9].schema(), other.lastUpdatedTimestamp);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'instructionId' field.
      * @return The value.
      */
    public long getInstructionId() {
      return instructionId;
    }


    /**
      * Sets the value of the 'instructionId' field.
      * @param value The value of 'instructionId'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setInstructionId(long value) {
      validate(fields()[0], value);
      this.instructionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instructionId' field has been set.
      * @return True if the 'instructionId' field has been set, false otherwise.
      */
    public boolean hasInstructionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instructionId' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearInstructionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getTradeDate() {
      return tradeDate;
    }


    /**
      * Sets the value of the 'tradeDate' field.
      * @param value The value of 'tradeDate'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setTradeDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tradeDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeDate' field has been set.
      * @return True if the 'tradeDate' field has been set, false otherwise.
      */
    public boolean hasTradeDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tradeDate' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearTradeDate() {
      tradeDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlementDate() {
      return settlementDate;
    }


    /**
      * Sets the value of the 'settlementDate' field.
      * @param value The value of 'settlementDate'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setSettlementDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.settlementDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementDate' field has been set.
      * @return True if the 'settlementDate' field has been set, false otherwise.
      */
    public boolean hasSettlementDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'settlementDate' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearSettlementDate() {
      settlementDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setQuantity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'settledQuantity' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettledQuantity() {
      return settledQuantity;
    }


    /**
      * Sets the value of the 'settledQuantity' field.
      * @param value The value of 'settledQuantity'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setSettledQuantity(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.settledQuantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'settledQuantity' field has been set.
      * @return True if the 'settledQuantity' field has been set, false otherwise.
      */
    public boolean hasSettledQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'settledQuantity' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearSettledQuantity() {
      settledQuantity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cashAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getCashAmount() {
      return cashAmount;
    }


    /**
      * Sets the value of the 'cashAmount' field.
      * @param value The value of 'cashAmount'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setCashAmount(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cashAmount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cashAmount' field has been set.
      * @return True if the 'cashAmount' field has been set, false otherwise.
      */
    public boolean hasCashAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cashAmount' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearCashAmount() {
      cashAmount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cashSettledAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getCashSettledAmount() {
      return cashSettledAmount;
    }


    /**
      * Sets the value of the 'cashSettledAmount' field.
      * @param value The value of 'cashSettledAmount'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setCashSettledAmount(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.cashSettledAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cashSettledAmount' field has been set.
      * @return True if the 'cashSettledAmount' field has been set, false otherwise.
      */
    public boolean hasCashSettledAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cashSettledAmount' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearCashSettledAmount() {
      cashSettledAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ccpCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCcpCode() {
      return ccpCode;
    }


    /**
      * Sets the value of the 'ccpCode' field.
      * @param value The value of 'ccpCode'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setCcpCode(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.ccpCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ccpCode' field has been set.
      * @return True if the 'ccpCode' field has been set, false otherwise.
      */
    public boolean hasCcpCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ccpCode' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearCcpCode() {
      ccpCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdatedTimestamp' field.
      * @return The value.
      */
    public java.time.Instant getLastUpdatedTimestamp() {
      return lastUpdatedTimestamp;
    }


    /**
      * Sets the value of the 'lastUpdatedTimestamp' field.
      * @param value The value of 'lastUpdatedTimestamp'.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder setLastUpdatedTimestamp(java.time.Instant value) {
      validate(fields()[9], value);
      this.lastUpdatedTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdatedTimestamp' field has been set.
      * @return True if the 'lastUpdatedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastUpdatedTimestamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'lastUpdatedTimestamp' field.
      * @return This builder.
      */
    public com.nuamx.png.wri.SettlementFulfillmentStatus.Builder clearLastUpdatedTimestamp() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SettlementFulfillmentStatus build() {
      try {
        SettlementFulfillmentStatus record = new SettlementFulfillmentStatus();
        record.instructionId = fieldSetFlags()[0] ? this.instructionId : (java.lang.Long) defaultValue(fields()[0]);
        record.tradeDate = fieldSetFlags()[1] ? this.tradeDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.settlementDate = fieldSetFlags()[2] ? this.settlementDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.settledQuantity = fieldSetFlags()[4] ? this.settledQuantity : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.cashAmount = fieldSetFlags()[5] ? this.cashAmount : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.cashSettledAmount = fieldSetFlags()[6] ? this.cashSettledAmount : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.ccpCode = fieldSetFlags()[8] ? this.ccpCode : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.lastUpdatedTimestamp = fieldSetFlags()[9] ? this.lastUpdatedTimestamp : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SettlementFulfillmentStatus>
    WRITER$ = (org.apache.avro.io.DatumWriter<SettlementFulfillmentStatus>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SettlementFulfillmentStatus>
    READER$ = (org.apache.avro.io.DatumReader<SettlementFulfillmentStatus>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










