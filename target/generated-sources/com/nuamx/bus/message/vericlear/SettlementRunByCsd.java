/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nuamx.bus.message.vericlear;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SettlementRunByCsd extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8382096495626980464L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SettlementRunByCsd\",\"namespace\":\"com.nuamx.bus.message.vericlear\",\"fields\":[{\"name\":\"businessDate\",\"type\":\"string\"},{\"name\":\"ccpCode\",\"type\":\"string\"},{\"name\":\"csdCode\",\"type\":\"string\"},{\"name\":\"numberOfSettledInstructions\",\"type\":\"int\"},{\"name\":\"sequenceNumber\",\"type\":\"int\",\"doc\":\"Unique sequence Number nuam\"},{\"name\":\"settlementDate\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"totalNumberOfInstructions\",\"type\":\"int\"},{\"name\":\"triggerTimestamp\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SettlementRunByCsd> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SettlementRunByCsd> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SettlementRunByCsd> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SettlementRunByCsd> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SettlementRunByCsd> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SettlementRunByCsd to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SettlementRunByCsd from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SettlementRunByCsd instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SettlementRunByCsd fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence businessDate;
  private java.lang.CharSequence ccpCode;
  private java.lang.CharSequence csdCode;
  private int numberOfSettledInstructions;
  /** Unique sequence Number nuam */
  private int sequenceNumber;
  private java.lang.CharSequence settlementDate;
  private java.lang.CharSequence status;
  private int totalNumberOfInstructions;
  private java.lang.CharSequence triggerTimestamp;
  private java.lang.CharSequence user;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SettlementRunByCsd() {}

  /**
   * All-args constructor.
   * @param businessDate The new value for businessDate
   * @param ccpCode The new value for ccpCode
   * @param csdCode The new value for csdCode
   * @param numberOfSettledInstructions The new value for numberOfSettledInstructions
   * @param sequenceNumber Unique sequence Number nuam
   * @param settlementDate The new value for settlementDate
   * @param status The new value for status
   * @param totalNumberOfInstructions The new value for totalNumberOfInstructions
   * @param triggerTimestamp The new value for triggerTimestamp
   * @param user The new value for user
   */
  public SettlementRunByCsd(java.lang.CharSequence businessDate, java.lang.CharSequence ccpCode, java.lang.CharSequence csdCode, java.lang.Integer numberOfSettledInstructions, java.lang.Integer sequenceNumber, java.lang.CharSequence settlementDate, java.lang.CharSequence status, java.lang.Integer totalNumberOfInstructions, java.lang.CharSequence triggerTimestamp, java.lang.CharSequence user) {
    this.businessDate = businessDate;
    this.ccpCode = ccpCode;
    this.csdCode = csdCode;
    this.numberOfSettledInstructions = numberOfSettledInstructions;
    this.sequenceNumber = sequenceNumber;
    this.settlementDate = settlementDate;
    this.status = status;
    this.totalNumberOfInstructions = totalNumberOfInstructions;
    this.triggerTimestamp = triggerTimestamp;
    this.user = user;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return businessDate;
    case 1: return ccpCode;
    case 2: return csdCode;
    case 3: return numberOfSettledInstructions;
    case 4: return sequenceNumber;
    case 5: return settlementDate;
    case 6: return status;
    case 7: return totalNumberOfInstructions;
    case 8: return triggerTimestamp;
    case 9: return user;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: businessDate = (java.lang.CharSequence)value$; break;
    case 1: ccpCode = (java.lang.CharSequence)value$; break;
    case 2: csdCode = (java.lang.CharSequence)value$; break;
    case 3: numberOfSettledInstructions = (java.lang.Integer)value$; break;
    case 4: sequenceNumber = (java.lang.Integer)value$; break;
    case 5: settlementDate = (java.lang.CharSequence)value$; break;
    case 6: status = (java.lang.CharSequence)value$; break;
    case 7: totalNumberOfInstructions = (java.lang.Integer)value$; break;
    case 8: triggerTimestamp = (java.lang.CharSequence)value$; break;
    case 9: user = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'businessDate' field.
   * @return The value of the 'businessDate' field.
   */
  public java.lang.CharSequence getBusinessDate() {
    return businessDate;
  }


  /**
   * Sets the value of the 'businessDate' field.
   * @param value the value to set.
   */
  public void setBusinessDate(java.lang.CharSequence value) {
    this.businessDate = value;
  }

  /**
   * Gets the value of the 'ccpCode' field.
   * @return The value of the 'ccpCode' field.
   */
  public java.lang.CharSequence getCcpCode() {
    return ccpCode;
  }


  /**
   * Sets the value of the 'ccpCode' field.
   * @param value the value to set.
   */
  public void setCcpCode(java.lang.CharSequence value) {
    this.ccpCode = value;
  }

  /**
   * Gets the value of the 'csdCode' field.
   * @return The value of the 'csdCode' field.
   */
  public java.lang.CharSequence getCsdCode() {
    return csdCode;
  }


  /**
   * Sets the value of the 'csdCode' field.
   * @param value the value to set.
   */
  public void setCsdCode(java.lang.CharSequence value) {
    this.csdCode = value;
  }

  /**
   * Gets the value of the 'numberOfSettledInstructions' field.
   * @return The value of the 'numberOfSettledInstructions' field.
   */
  public int getNumberOfSettledInstructions() {
    return numberOfSettledInstructions;
  }


  /**
   * Sets the value of the 'numberOfSettledInstructions' field.
   * @param value the value to set.
   */
  public void setNumberOfSettledInstructions(int value) {
    this.numberOfSettledInstructions = value;
  }

  /**
   * Gets the value of the 'sequenceNumber' field.
   * @return Unique sequence Number nuam
   */
  public int getSequenceNumber() {
    return sequenceNumber;
  }


  /**
   * Sets the value of the 'sequenceNumber' field.
   * Unique sequence Number nuam
   * @param value the value to set.
   */
  public void setSequenceNumber(int value) {
    this.sequenceNumber = value;
  }

  /**
   * Gets the value of the 'settlementDate' field.
   * @return The value of the 'settlementDate' field.
   */
  public java.lang.CharSequence getSettlementDate() {
    return settlementDate;
  }


  /**
   * Sets the value of the 'settlementDate' field.
   * @param value the value to set.
   */
  public void setSettlementDate(java.lang.CharSequence value) {
    this.settlementDate = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'totalNumberOfInstructions' field.
   * @return The value of the 'totalNumberOfInstructions' field.
   */
  public int getTotalNumberOfInstructions() {
    return totalNumberOfInstructions;
  }


  /**
   * Sets the value of the 'totalNumberOfInstructions' field.
   * @param value the value to set.
   */
  public void setTotalNumberOfInstructions(int value) {
    this.totalNumberOfInstructions = value;
  }

  /**
   * Gets the value of the 'triggerTimestamp' field.
   * @return The value of the 'triggerTimestamp' field.
   */
  public java.lang.CharSequence getTriggerTimestamp() {
    return triggerTimestamp;
  }


  /**
   * Sets the value of the 'triggerTimestamp' field.
   * @param value the value to set.
   */
  public void setTriggerTimestamp(java.lang.CharSequence value) {
    this.triggerTimestamp = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Creates a new SettlementRunByCsd RecordBuilder.
   * @return A new SettlementRunByCsd RecordBuilder
   */
  public static com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder newBuilder() {
    return new com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder();
  }

  /**
   * Creates a new SettlementRunByCsd RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SettlementRunByCsd RecordBuilder
   */
  public static com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder newBuilder(com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder other) {
    if (other == null) {
      return new com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder();
    } else {
      return new com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder(other);
    }
  }

  /**
   * Creates a new SettlementRunByCsd RecordBuilder by copying an existing SettlementRunByCsd instance.
   * @param other The existing instance to copy.
   * @return A new SettlementRunByCsd RecordBuilder
   */
  public static com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder newBuilder(com.nuamx.bus.message.vericlear.SettlementRunByCsd other) {
    if (other == null) {
      return new com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder();
    } else {
      return new com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder(other);
    }
  }

  /**
   * RecordBuilder for SettlementRunByCsd instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SettlementRunByCsd>
    implements org.apache.avro.data.RecordBuilder<SettlementRunByCsd> {

    private java.lang.CharSequence businessDate;
    private java.lang.CharSequence ccpCode;
    private java.lang.CharSequence csdCode;
    private int numberOfSettledInstructions;
    /** Unique sequence Number nuam */
    private int sequenceNumber;
    private java.lang.CharSequence settlementDate;
    private java.lang.CharSequence status;
    private int totalNumberOfInstructions;
    private java.lang.CharSequence triggerTimestamp;
    private java.lang.CharSequence user;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.businessDate)) {
        this.businessDate = data().deepCopy(fields()[0].schema(), other.businessDate);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ccpCode)) {
        this.ccpCode = data().deepCopy(fields()[1].schema(), other.ccpCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.csdCode)) {
        this.csdCode = data().deepCopy(fields()[2].schema(), other.csdCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.numberOfSettledInstructions)) {
        this.numberOfSettledInstructions = data().deepCopy(fields()[3].schema(), other.numberOfSettledInstructions);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[4].schema(), other.sequenceNumber);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[5].schema(), other.settlementDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.totalNumberOfInstructions)) {
        this.totalNumberOfInstructions = data().deepCopy(fields()[7].schema(), other.totalNumberOfInstructions);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.triggerTimestamp)) {
        this.triggerTimestamp = data().deepCopy(fields()[8].schema(), other.triggerTimestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.user)) {
        this.user = data().deepCopy(fields()[9].schema(), other.user);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing SettlementRunByCsd instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nuamx.bus.message.vericlear.SettlementRunByCsd other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.businessDate)) {
        this.businessDate = data().deepCopy(fields()[0].schema(), other.businessDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ccpCode)) {
        this.ccpCode = data().deepCopy(fields()[1].schema(), other.ccpCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.csdCode)) {
        this.csdCode = data().deepCopy(fields()[2].schema(), other.csdCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberOfSettledInstructions)) {
        this.numberOfSettledInstructions = data().deepCopy(fields()[3].schema(), other.numberOfSettledInstructions);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[4].schema(), other.sequenceNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[5].schema(), other.settlementDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalNumberOfInstructions)) {
        this.totalNumberOfInstructions = data().deepCopy(fields()[7].schema(), other.totalNumberOfInstructions);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.triggerTimestamp)) {
        this.triggerTimestamp = data().deepCopy(fields()[8].schema(), other.triggerTimestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.user)) {
        this.user = data().deepCopy(fields()[9].schema(), other.user);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'businessDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getBusinessDate() {
      return businessDate;
    }


    /**
      * Sets the value of the 'businessDate' field.
      * @param value The value of 'businessDate'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setBusinessDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.businessDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'businessDate' field has been set.
      * @return True if the 'businessDate' field has been set, false otherwise.
      */
    public boolean hasBusinessDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'businessDate' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearBusinessDate() {
      businessDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ccpCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCcpCode() {
      return ccpCode;
    }


    /**
      * Sets the value of the 'ccpCode' field.
      * @param value The value of 'ccpCode'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setCcpCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ccpCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ccpCode' field has been set.
      * @return True if the 'ccpCode' field has been set, false otherwise.
      */
    public boolean hasCcpCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ccpCode' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearCcpCode() {
      ccpCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'csdCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCsdCode() {
      return csdCode;
    }


    /**
      * Sets the value of the 'csdCode' field.
      * @param value The value of 'csdCode'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setCsdCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.csdCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'csdCode' field has been set.
      * @return True if the 'csdCode' field has been set, false otherwise.
      */
    public boolean hasCsdCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'csdCode' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearCsdCode() {
      csdCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfSettledInstructions' field.
      * @return The value.
      */
    public int getNumberOfSettledInstructions() {
      return numberOfSettledInstructions;
    }


    /**
      * Sets the value of the 'numberOfSettledInstructions' field.
      * @param value The value of 'numberOfSettledInstructions'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setNumberOfSettledInstructions(int value) {
      validate(fields()[3], value);
      this.numberOfSettledInstructions = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfSettledInstructions' field has been set.
      * @return True if the 'numberOfSettledInstructions' field has been set, false otherwise.
      */
    public boolean hasNumberOfSettledInstructions() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'numberOfSettledInstructions' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearNumberOfSettledInstructions() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequenceNumber' field.
      * Unique sequence Number nuam
      * @return The value.
      */
    public int getSequenceNumber() {
      return sequenceNumber;
    }


    /**
      * Sets the value of the 'sequenceNumber' field.
      * Unique sequence Number nuam
      * @param value The value of 'sequenceNumber'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setSequenceNumber(int value) {
      validate(fields()[4], value);
      this.sequenceNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceNumber' field has been set.
      * Unique sequence Number nuam
      * @return True if the 'sequenceNumber' field has been set, false otherwise.
      */
    public boolean hasSequenceNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sequenceNumber' field.
      * Unique sequence Number nuam
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearSequenceNumber() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlementDate() {
      return settlementDate;
    }


    /**
      * Sets the value of the 'settlementDate' field.
      * @param value The value of 'settlementDate'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setSettlementDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.settlementDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementDate' field has been set.
      * @return True if the 'settlementDate' field has been set, false otherwise.
      */
    public boolean hasSettlementDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'settlementDate' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearSettlementDate() {
      settlementDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalNumberOfInstructions' field.
      * @return The value.
      */
    public int getTotalNumberOfInstructions() {
      return totalNumberOfInstructions;
    }


    /**
      * Sets the value of the 'totalNumberOfInstructions' field.
      * @param value The value of 'totalNumberOfInstructions'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setTotalNumberOfInstructions(int value) {
      validate(fields()[7], value);
      this.totalNumberOfInstructions = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalNumberOfInstructions' field has been set.
      * @return True if the 'totalNumberOfInstructions' field has been set, false otherwise.
      */
    public boolean hasTotalNumberOfInstructions() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalNumberOfInstructions' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearTotalNumberOfInstructions() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'triggerTimestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTriggerTimestamp() {
      return triggerTimestamp;
    }


    /**
      * Sets the value of the 'triggerTimestamp' field.
      * @param value The value of 'triggerTimestamp'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setTriggerTimestamp(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.triggerTimestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'triggerTimestamp' field has been set.
      * @return True if the 'triggerTimestamp' field has been set, false otherwise.
      */
    public boolean hasTriggerTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'triggerTimestamp' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearTriggerTimestamp() {
      triggerTimestamp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public java.lang.CharSequence getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.user = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public com.nuamx.bus.message.vericlear.SettlementRunByCsd.Builder clearUser() {
      user = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SettlementRunByCsd build() {
      try {
        SettlementRunByCsd record = new SettlementRunByCsd();
        record.businessDate = fieldSetFlags()[0] ? this.businessDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ccpCode = fieldSetFlags()[1] ? this.ccpCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.csdCode = fieldSetFlags()[2] ? this.csdCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.numberOfSettledInstructions = fieldSetFlags()[3] ? this.numberOfSettledInstructions : (java.lang.Integer) defaultValue(fields()[3]);
        record.sequenceNumber = fieldSetFlags()[4] ? this.sequenceNumber : (java.lang.Integer) defaultValue(fields()[4]);
        record.settlementDate = fieldSetFlags()[5] ? this.settlementDate : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.totalNumberOfInstructions = fieldSetFlags()[7] ? this.totalNumberOfInstructions : (java.lang.Integer) defaultValue(fields()[7]);
        record.triggerTimestamp = fieldSetFlags()[8] ? this.triggerTimestamp : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.user = fieldSetFlags()[9] ? this.user : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SettlementRunByCsd>
    WRITER$ = (org.apache.avro.io.DatumWriter<SettlementRunByCsd>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SettlementRunByCsd>
    READER$ = (org.apache.avro.io.DatumReader<SettlementRunByCsd>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.businessDate);

    out.writeString(this.ccpCode);

    out.writeString(this.csdCode);

    out.writeInt(this.numberOfSettledInstructions);

    out.writeInt(this.sequenceNumber);

    out.writeString(this.settlementDate);

    out.writeString(this.status);

    out.writeInt(this.totalNumberOfInstructions);

    out.writeString(this.triggerTimestamp);

    out.writeString(this.user);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.businessDate = in.readString(this.businessDate instanceof Utf8 ? (Utf8)this.businessDate : null);

      this.ccpCode = in.readString(this.ccpCode instanceof Utf8 ? (Utf8)this.ccpCode : null);

      this.csdCode = in.readString(this.csdCode instanceof Utf8 ? (Utf8)this.csdCode : null);

      this.numberOfSettledInstructions = in.readInt();

      this.sequenceNumber = in.readInt();

      this.settlementDate = in.readString(this.settlementDate instanceof Utf8 ? (Utf8)this.settlementDate : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.totalNumberOfInstructions = in.readInt();

      this.triggerTimestamp = in.readString(this.triggerTimestamp instanceof Utf8 ? (Utf8)this.triggerTimestamp : null);

      this.user = in.readString(this.user instanceof Utf8 ? (Utf8)this.user : null);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.businessDate = in.readString(this.businessDate instanceof Utf8 ? (Utf8)this.businessDate : null);
          break;

        case 1:
          this.ccpCode = in.readString(this.ccpCode instanceof Utf8 ? (Utf8)this.ccpCode : null);
          break;

        case 2:
          this.csdCode = in.readString(this.csdCode instanceof Utf8 ? (Utf8)this.csdCode : null);
          break;

        case 3:
          this.numberOfSettledInstructions = in.readInt();
          break;

        case 4:
          this.sequenceNumber = in.readInt();
          break;

        case 5:
          this.settlementDate = in.readString(this.settlementDate instanceof Utf8 ? (Utf8)this.settlementDate : null);
          break;

        case 6:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 7:
          this.totalNumberOfInstructions = in.readInt();
          break;

        case 8:
          this.triggerTimestamp = in.readString(this.triggerTimestamp instanceof Utf8 ? (Utf8)this.triggerTimestamp : null);
          break;

        case 9:
          this.user = in.readString(this.user instanceof Utf8 ? (Utf8)this.user : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










