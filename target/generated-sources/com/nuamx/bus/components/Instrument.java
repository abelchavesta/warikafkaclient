/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nuamx.bus.components;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Instrument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6082477552594439070L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Instrument\",\"namespace\":\"com.nuamx.bus.components\",\"fields\":[{\"name\":\"currencyAdjustment\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Currency\",\"namespace\":\"com.nuamx.bus.constants\",\"symbols\":[\"CLP\",\"COP\",\"PEN\",\"USD\",\"EURO\",\"UF\",\"IVP\"]}],\"default\":null},{\"name\":\"currencyIssue\",\"type\":[\"null\",\"com.nuamx.bus.constants.Currency\"],\"default\":null},{\"name\":\"exchange\",\"type\":{\"type\":\"enum\",\"name\":\"Exchange\",\"namespace\":\"com.nuamx.bus.constants\",\"symbols\":[\"NUAM\",\"XSGO\",\"XBVL\",\"XBVC\",\"XBCL\"]}},{\"name\":\"isin\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"securitySubType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"securityType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"symbol\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Instrument> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Instrument> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Instrument> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Instrument> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Instrument> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Instrument to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Instrument from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Instrument instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Instrument fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.nuamx.bus.constants.Currency currencyAdjustment;
  private com.nuamx.bus.constants.Currency currencyIssue;
  private com.nuamx.bus.constants.Exchange exchange;
  private java.lang.CharSequence isin;
  private java.lang.CharSequence securitySubType;
  private java.lang.CharSequence securityType;
  private java.lang.CharSequence symbol;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Instrument() {}

  /**
   * All-args constructor.
   * @param currencyAdjustment The new value for currencyAdjustment
   * @param currencyIssue The new value for currencyIssue
   * @param exchange The new value for exchange
   * @param isin The new value for isin
   * @param securitySubType The new value for securitySubType
   * @param securityType The new value for securityType
   * @param symbol The new value for symbol
   */
  public Instrument(com.nuamx.bus.constants.Currency currencyAdjustment, com.nuamx.bus.constants.Currency currencyIssue, com.nuamx.bus.constants.Exchange exchange, java.lang.CharSequence isin, java.lang.CharSequence securitySubType, java.lang.CharSequence securityType, java.lang.CharSequence symbol) {
    this.currencyAdjustment = currencyAdjustment;
    this.currencyIssue = currencyIssue;
    this.exchange = exchange;
    this.isin = isin;
    this.securitySubType = securitySubType;
    this.securityType = securityType;
    this.symbol = symbol;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currencyAdjustment;
    case 1: return currencyIssue;
    case 2: return exchange;
    case 3: return isin;
    case 4: return securitySubType;
    case 5: return securityType;
    case 6: return symbol;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currencyAdjustment = (com.nuamx.bus.constants.Currency)value$; break;
    case 1: currencyIssue = (com.nuamx.bus.constants.Currency)value$; break;
    case 2: exchange = (com.nuamx.bus.constants.Exchange)value$; break;
    case 3: isin = (java.lang.CharSequence)value$; break;
    case 4: securitySubType = (java.lang.CharSequence)value$; break;
    case 5: securityType = (java.lang.CharSequence)value$; break;
    case 6: symbol = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'currencyAdjustment' field.
   * @return The value of the 'currencyAdjustment' field.
   */
  public com.nuamx.bus.constants.Currency getCurrencyAdjustment() {
    return currencyAdjustment;
  }


  /**
   * Sets the value of the 'currencyAdjustment' field.
   * @param value the value to set.
   */
  public void setCurrencyAdjustment(com.nuamx.bus.constants.Currency value) {
    this.currencyAdjustment = value;
  }

  /**
   * Gets the value of the 'currencyIssue' field.
   * @return The value of the 'currencyIssue' field.
   */
  public com.nuamx.bus.constants.Currency getCurrencyIssue() {
    return currencyIssue;
  }


  /**
   * Sets the value of the 'currencyIssue' field.
   * @param value the value to set.
   */
  public void setCurrencyIssue(com.nuamx.bus.constants.Currency value) {
    this.currencyIssue = value;
  }

  /**
   * Gets the value of the 'exchange' field.
   * @return The value of the 'exchange' field.
   */
  public com.nuamx.bus.constants.Exchange getExchange() {
    return exchange;
  }


  /**
   * Sets the value of the 'exchange' field.
   * @param value the value to set.
   */
  public void setExchange(com.nuamx.bus.constants.Exchange value) {
    this.exchange = value;
  }

  /**
   * Gets the value of the 'isin' field.
   * @return The value of the 'isin' field.
   */
  public java.lang.CharSequence getIsin() {
    return isin;
  }


  /**
   * Sets the value of the 'isin' field.
   * @param value the value to set.
   */
  public void setIsin(java.lang.CharSequence value) {
    this.isin = value;
  }

  /**
   * Gets the value of the 'securitySubType' field.
   * @return The value of the 'securitySubType' field.
   */
  public java.lang.CharSequence getSecuritySubType() {
    return securitySubType;
  }


  /**
   * Sets the value of the 'securitySubType' field.
   * @param value the value to set.
   */
  public void setSecuritySubType(java.lang.CharSequence value) {
    this.securitySubType = value;
  }

  /**
   * Gets the value of the 'securityType' field.
   * @return The value of the 'securityType' field.
   */
  public java.lang.CharSequence getSecurityType() {
    return securityType;
  }


  /**
   * Sets the value of the 'securityType' field.
   * @param value the value to set.
   */
  public void setSecurityType(java.lang.CharSequence value) {
    this.securityType = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Creates a new Instrument RecordBuilder.
   * @return A new Instrument RecordBuilder
   */
  public static com.nuamx.bus.components.Instrument.Builder newBuilder() {
    return new com.nuamx.bus.components.Instrument.Builder();
  }

  /**
   * Creates a new Instrument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Instrument RecordBuilder
   */
  public static com.nuamx.bus.components.Instrument.Builder newBuilder(com.nuamx.bus.components.Instrument.Builder other) {
    if (other == null) {
      return new com.nuamx.bus.components.Instrument.Builder();
    } else {
      return new com.nuamx.bus.components.Instrument.Builder(other);
    }
  }

  /**
   * Creates a new Instrument RecordBuilder by copying an existing Instrument instance.
   * @param other The existing instance to copy.
   * @return A new Instrument RecordBuilder
   */
  public static com.nuamx.bus.components.Instrument.Builder newBuilder(com.nuamx.bus.components.Instrument other) {
    if (other == null) {
      return new com.nuamx.bus.components.Instrument.Builder();
    } else {
      return new com.nuamx.bus.components.Instrument.Builder(other);
    }
  }

  /**
   * RecordBuilder for Instrument instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Instrument>
    implements org.apache.avro.data.RecordBuilder<Instrument> {

    private com.nuamx.bus.constants.Currency currencyAdjustment;
    private com.nuamx.bus.constants.Currency currencyIssue;
    private com.nuamx.bus.constants.Exchange exchange;
    private java.lang.CharSequence isin;
    private java.lang.CharSequence securitySubType;
    private java.lang.CharSequence securityType;
    private java.lang.CharSequence symbol;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nuamx.bus.components.Instrument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currencyAdjustment)) {
        this.currencyAdjustment = data().deepCopy(fields()[0].schema(), other.currencyAdjustment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.currencyIssue)) {
        this.currencyIssue = data().deepCopy(fields()[1].schema(), other.currencyIssue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.exchange)) {
        this.exchange = data().deepCopy(fields()[2].schema(), other.exchange);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.isin)) {
        this.isin = data().deepCopy(fields()[3].schema(), other.isin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.securitySubType)) {
        this.securitySubType = data().deepCopy(fields()[4].schema(), other.securitySubType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.securityType)) {
        this.securityType = data().deepCopy(fields()[5].schema(), other.securityType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.symbol)) {
        this.symbol = data().deepCopy(fields()[6].schema(), other.symbol);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Instrument instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nuamx.bus.components.Instrument other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.currencyAdjustment)) {
        this.currencyAdjustment = data().deepCopy(fields()[0].schema(), other.currencyAdjustment);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currencyIssue)) {
        this.currencyIssue = data().deepCopy(fields()[1].schema(), other.currencyIssue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.exchange)) {
        this.exchange = data().deepCopy(fields()[2].schema(), other.exchange);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isin)) {
        this.isin = data().deepCopy(fields()[3].schema(), other.isin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.securitySubType)) {
        this.securitySubType = data().deepCopy(fields()[4].schema(), other.securitySubType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.securityType)) {
        this.securityType = data().deepCopy(fields()[5].schema(), other.securityType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.symbol)) {
        this.symbol = data().deepCopy(fields()[6].schema(), other.symbol);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'currencyAdjustment' field.
      * @return The value.
      */
    public com.nuamx.bus.constants.Currency getCurrencyAdjustment() {
      return currencyAdjustment;
    }


    /**
      * Sets the value of the 'currencyAdjustment' field.
      * @param value The value of 'currencyAdjustment'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setCurrencyAdjustment(com.nuamx.bus.constants.Currency value) {
      validate(fields()[0], value);
      this.currencyAdjustment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyAdjustment' field has been set.
      * @return True if the 'currencyAdjustment' field has been set, false otherwise.
      */
    public boolean hasCurrencyAdjustment() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currencyAdjustment' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearCurrencyAdjustment() {
      currencyAdjustment = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currencyIssue' field.
      * @return The value.
      */
    public com.nuamx.bus.constants.Currency getCurrencyIssue() {
      return currencyIssue;
    }


    /**
      * Sets the value of the 'currencyIssue' field.
      * @param value The value of 'currencyIssue'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setCurrencyIssue(com.nuamx.bus.constants.Currency value) {
      validate(fields()[1], value);
      this.currencyIssue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyIssue' field has been set.
      * @return True if the 'currencyIssue' field has been set, false otherwise.
      */
    public boolean hasCurrencyIssue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currencyIssue' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearCurrencyIssue() {
      currencyIssue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchange' field.
      * @return The value.
      */
    public com.nuamx.bus.constants.Exchange getExchange() {
      return exchange;
    }


    /**
      * Sets the value of the 'exchange' field.
      * @param value The value of 'exchange'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setExchange(com.nuamx.bus.constants.Exchange value) {
      validate(fields()[2], value);
      this.exchange = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'exchange' field has been set.
      * @return True if the 'exchange' field has been set, false otherwise.
      */
    public boolean hasExchange() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'exchange' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearExchange() {
      exchange = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isin' field.
      * @return The value.
      */
    public java.lang.CharSequence getIsin() {
      return isin;
    }


    /**
      * Sets the value of the 'isin' field.
      * @param value The value of 'isin'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setIsin(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.isin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isin' field has been set.
      * @return True if the 'isin' field has been set, false otherwise.
      */
    public boolean hasIsin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isin' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearIsin() {
      isin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'securitySubType' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecuritySubType() {
      return securitySubType;
    }


    /**
      * Sets the value of the 'securitySubType' field.
      * @param value The value of 'securitySubType'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setSecuritySubType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.securitySubType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'securitySubType' field has been set.
      * @return True if the 'securitySubType' field has been set, false otherwise.
      */
    public boolean hasSecuritySubType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'securitySubType' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearSecuritySubType() {
      securitySubType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'securityType' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecurityType() {
      return securityType;
    }


    /**
      * Sets the value of the 'securityType' field.
      * @param value The value of 'securityType'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setSecurityType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.securityType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'securityType' field has been set.
      * @return True if the 'securityType' field has been set, false otherwise.
      */
    public boolean hasSecurityType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'securityType' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearSecurityType() {
      securityType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.symbol = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.nuamx.bus.components.Instrument.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Instrument build() {
      try {
        Instrument record = new Instrument();
        record.currencyAdjustment = fieldSetFlags()[0] ? this.currencyAdjustment : (com.nuamx.bus.constants.Currency) defaultValue(fields()[0]);
        record.currencyIssue = fieldSetFlags()[1] ? this.currencyIssue : (com.nuamx.bus.constants.Currency) defaultValue(fields()[1]);
        record.exchange = fieldSetFlags()[2] ? this.exchange : (com.nuamx.bus.constants.Exchange) defaultValue(fields()[2]);
        record.isin = fieldSetFlags()[3] ? this.isin : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.securitySubType = fieldSetFlags()[4] ? this.securitySubType : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.securityType = fieldSetFlags()[5] ? this.securityType : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.symbol = fieldSetFlags()[6] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Instrument>
    WRITER$ = (org.apache.avro.io.DatumWriter<Instrument>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Instrument>
    READER$ = (org.apache.avro.io.DatumReader<Instrument>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.currencyAdjustment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.currencyAdjustment.ordinal());
    }

    if (this.currencyIssue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.currencyIssue.ordinal());
    }

    out.writeEnum(this.exchange.ordinal());

    if (this.isin == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.isin);
    }

    if (this.securitySubType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.securitySubType);
    }

    if (this.securityType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.securityType);
    }

    out.writeString(this.symbol);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.currencyAdjustment = null;
      } else {
        this.currencyAdjustment = com.nuamx.bus.constants.Currency.values()[in.readEnum()];
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currencyIssue = null;
      } else {
        this.currencyIssue = com.nuamx.bus.constants.Currency.values()[in.readEnum()];
      }

      this.exchange = com.nuamx.bus.constants.Exchange.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.isin = null;
      } else {
        this.isin = in.readString(this.isin instanceof Utf8 ? (Utf8)this.isin : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.securitySubType = null;
      } else {
        this.securitySubType = in.readString(this.securitySubType instanceof Utf8 ? (Utf8)this.securitySubType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.securityType = null;
      } else {
        this.securityType = in.readString(this.securityType instanceof Utf8 ? (Utf8)this.securityType : null);
      }

      this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currencyAdjustment = null;
          } else {
            this.currencyAdjustment = com.nuamx.bus.constants.Currency.values()[in.readEnum()];
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currencyIssue = null;
          } else {
            this.currencyIssue = com.nuamx.bus.constants.Currency.values()[in.readEnum()];
          }
          break;

        case 2:
          this.exchange = com.nuamx.bus.constants.Exchange.values()[in.readEnum()];
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isin = null;
          } else {
            this.isin = in.readString(this.isin instanceof Utf8 ? (Utf8)this.isin : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.securitySubType = null;
          } else {
            this.securitySubType = in.readString(this.securitySubType instanceof Utf8 ? (Utf8)this.securitySubType : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.securityType = null;
          } else {
            this.securityType = in.readString(this.securityType instanceof Utf8 ? (Utf8)this.securityType : null);
          }
          break;

        case 6:
          this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










